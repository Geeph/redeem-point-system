<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
	http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">
	<welcome-file-list>
		<welcome-file>index.jsp</welcome-file>
	</welcome-file-list>
	<description>小代的工程，使用S2SH+ExtJS2开发。</description>
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/applicationContext.xml,/WEB-INF/apps/applicationContext-service.xml,/WEB-INF/apps/applicationContext-action.xml,/WEB-INF/apps/applicationContext-quartz.xml</param-value>
	</context-param>
	<!-- Spring 的监听器 -->
	<listener>
		<listener-class>
			org.springframework.web.context.ContextLoaderListener
			<!-- com.systemsoft.util.listener.ContextLoaderListener -->
		</listener-class>
	</listener>
	<!-- 编码过滤器 -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>
			org.springframework.web.filter.CharacterEncodingFilter
		</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>
	
	<!-- cas 单点登录监听器 -->
	<listener>
		<listener-class>org.jasig.cas.client.session.SingleSignOutHttpSessionListener</listener-class>
	</listener>
	<!-- CAS 单点登录拦截器 -->
	<!-- 登出注销拦截器 -->
	<filter>
		<filter-name>CAS Single Sign Out Filter</filter-name>
		<filter-class>org.jasig.cas.client.session.SingleSignOutFilter</filter-class>
	</filter>
	<!-- 登录拦截器 -->
	<filter>
		<filter-name>CAS Filter</filter-name>
		<filter-class>edu.yale.its.tp.cas.client.filter.CASFilter</filter-class>
		<!-- cas验证服务器登录url(必须) -->
		<init-param>
			<param-name>edu.yale.its.tp.cas.client.filter.loginUrl</param-name>
			<param-value>http://localhost:8088/cas/login</param-value>
		</init-param>
		<!-- cas验证服务器url(必须) -->
		<init-param>
			<param-name>edu.yale.its.tp.cas.client.filter.validateUrl</param-name>
			<param-value>http://localhost:8088/cas/serviceValidate</param-value>
		</init-param>
		<!-- 要拦截的url -->
		<!-- 由于不能缺少下面的那个url的配置，而这个配置又不能与下面的配置同时出现，所以这个配置应该是坚决不能出现的！
		<init-param>
			<param-name>edu.yale.its.tp.cas.client.filter.serverName</param-name>
			<param-value>http://localhost:8088</param-value>
		</init-param>
		 -->
		<!-- edu.yale.its.tp.cas.client.filter.serverName -->
		<!-- 要拦截的url(必须是某一个系统) -->
		<init-param>
			<param-name>edu.yale.its.tp.cas.client.filter.serviceUrl</param-name>
			<param-value>http://localhost:8088/extSystem</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>CAS Single Sign Out Filter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>CAS Filter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!-- 清除上传之后的临时文件 -->
	<!-- 
	<listener>
		<listener-class>org.apache.commons.fileupload.servlet.FileCleanerCleanup</listener-class>
	</listener>
	 -->
	<!-- GZIP压缩过滤器 -->
	<!-- 
	<filter>
		<filter-name>gzipFilter</filter-name>
		<filter-class>com.systemsoft.util.filter.GZipFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>gzipFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	 -->
	<!-- 为了页面安全，判断是否登录系统，若没有，则转向登录页面 -->
	<filter>
		<filter-name>securityFilter</filter-name>
		<filter-class>com.systemsoft.util.filter.SecurityFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>securityFilter</filter-name>
		<url-pattern>*.jsp</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>securityFilter</filter-name>
		<url-pattern>*.action</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>securityFilter</filter-name>
		<url-pattern>*.do</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>securityFilter</filter-name>
		<url-pattern>/fileUploadServlet/fileUploadServlet</url-pattern>
	</filter-mapping>
	
	<!-- 监听session -->
	<!-- 解决hibernate延迟加载带来的异常，配置过滤器使Session在请求完成之后再关闭 -->
	<filter>
		<filter-name>hibernate session manager filter</filter-name>
		<filter-class>org.springframework.orm.hibernate3.support.OpenSessionInViewFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>hibernate session manager filter</filter-name>
		<url-pattern>*.action</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>hibernate session manager filter</filter-name>
		<url-pattern>*.do</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>hibernate session manager filter</filter-name>
		<url-pattern>*.jsp</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>hibernate session manager filter</filter-name>
		<url-pattern>*.html</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>securityFilter</filter-name>
		<url-pattern>/fileUploadServlet/fileUploadServlet</url-pattern>
	</filter-mapping>
	<!-- 自定义的监听器 -->
	<listener>
		<listener-class>
			com.systemsoft.util.session.sessionlistener.SessionAttributeListener
		</listener-class>
	</listener>
	<!-- 自定义的监听器 -->
	<listener>
		<listener-class>
			com.systemsoft.util.session.sessionlistener.SessionListener
		</listener-class>
	</listener>
	
	<!-- session会话超时，单位为：分钟，只能是整数。0、负数：永不过期 -->
	<session-config>
		<session-timeout>1</session-timeout>
	</session-config>
	
	<!-- Struts2过滤器 -->
	<filter>
		<filter-name>struts2</filter-name>
		<filter-class>org.apache.struts2.dispatcher.FilterDispatcher</filter-class>
		<!-- 
		<init-param>
			<param-name>config</param-name>
			<param-value>struts-default.xml,struts-plugin.xml,struts.xml</param-value>
		</init-param>
		 -->
		<!-- 
		<filter-class>
			org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter
		</filter-class>
		 -->
	</filter>
	<filter-mapping>
		<filter-name>struts2</filter-name>
		<url-pattern>*.action</url-pattern>
	</filter-mapping>
	<!-- 为了使用common-FileUpload组件上传，则不能使用struts2这个过滤器，否则将被struts自带的上传组件过滤掉。这样的话，就只能使用JSP来处理上传操作了 -->
	<!-- 上传组件已经交给servlet做了 -->
	<filter-mapping>
		<filter-name>struts2</filter-name>
		<url-pattern>*.jsp</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>struts2</filter-name>
		<url-pattern>*.do</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>struts2</filter-name>
		<url-pattern>*.html</url-pattern>
	</filter-mapping>
	<!-- 上传组件 servlet start-->
	<servlet>
		<servlet-name>fileUpload</servlet-name>
		<servlet-class>com.systemsoft.system.fileupload.servlet.FileUploadServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>fileUpload</servlet-name>
		<url-pattern>/fileUploadServlet/fileUploadServlet</url-pattern>
	</servlet-mapping>
	<!-- 上传组件 end-->
	<!-- 
	<servlet>
		<servlet-name>springUpload</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>springUpload</servlet-name>
		<url-pattern>*.action</url-pattern>
	</servlet-mapping>
	 -->
	<!-- 
		<filter>
		<filter-name>Encoding</filter-name>
		<filter-class>com.systemsoft.util.SetCharacterEncodingFilter</filter-class>
		</filter>
		<filter-mapping>
		<filter-name>Encoding</filter-name>
		<url-pattern>/*</url-pattern>
		</filter-mapping>
	-->
	<!-- 系统初始化监听器start -->
	<listener>
		<listener-class>
			com.systemsoft.util.init.InitSystemListener
		</listener-class>
	</listener>
	<!-- 定时器监听器 start -->
	<listener>
		<listener-class>
			com.systemsoft.util.listener.timetask.TimeTaskListener
		</listener-class>
	</listener>
	<!-- 定时器监听器 end -->
	<error-page>
    	<error-code>404</error-code>
    	<location>/index.jsp</location>
    </error-page>
	<!-- 系统初始化监听器end -->
	<context-param>
		<!-- 这个是使用exttag设置的初始化设置ext3.1路径 -->
	    <param-name>ext-home</param-name>
	    <param-value>js/ext-3.1.0</param-value>
	</context-param>
</web-app>
