<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" id="WebApp_ID" version="2.5">
  <display-name>redeempoint</display-name>
  <!-- 初始化数据库操作 -->
  
  <listener>
  	<listener-class>com.integral.util.listener.initdatabase.InitDataBaseListener</listener-class>
  </listener>
  
  <!-- Spring配置文件 -->
  <context-param>
  	<param-name>contextConfigLocation</param-name>
  	<param-value>/WEB-INF/applicationContext.xml,/WEB-INF/dwr/application-message.xml,/WEB-INF/service/applicationContext-dao.xml,/WEB-INF/service/applicationContext-service.xml,/WEB-INF/service/applicationContext-action.xml,/WEB-INF/spring-security/applicationContext-security.xml</param-value>
  </context-param>
  <!-- Spring监听器 -->
  <listener>
  	<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  <listener>
  	<listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
  </listener>
  <!-- SpringSecurity session 监听器 -->
  <listener>
  	<listener-class>org.springframework.security.web.session.HttpSessionEventPublisher</listener-class>
  </listener>
  <!-- 数据编码配置 -->
  <filter>
  	<filter-name>encodingFilter</filter-name>
  	<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
  	<init-param>
  		<param-name>encoding</param-name>
  		<param-value>UTF-8</param-value>
  	</init-param>
  	<init-param>
  		<param-name>forceEncoding</param-name>
  		<param-value>true</param-value>
  	</init-param>
  </filter>
  <filter-mapping>
  	<filter-name>encodingFilter</filter-name>
  	<url-pattern>/*</url-pattern>
  </filter-mapping>
  <!-- SpringSecurity3配置 -->
  <filter>
  	<filter-name>springSecurityFilterChain</filter-name>
  	<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
  </filter>
  <filter-mapping>
  	<filter-name>springSecurityFilterChain</filter-name>
  	<url-pattern>/*</url-pattern>
  </filter-mapping>
  <!-- 自定义Servlet配置 -->
  <servlet>
  	<servlet-name>dwr</servlet-name>
  	<servlet-class>org.directwebremoting.servlet.DwrServlet</servlet-class>
  	<init-param>
  		<description>调试DWR,发布系统时应将其设为false</description>
  		<param-name>debug</param-name>
  		<param-value>true</param-value>
  	</init-param>
  	<init-param>
  		<description>使用服务器推技术(反转AJAX)</description>
        <param-name>activeReverseAjaxEnabled</param-name>
        <param-value>true</param-value>
    </init-param>
    <init-param>
        <param-name>crossDomainSessionSecurity</param-name>
        <param-value>false</param-value>
    </init-param>
    <init-param>
		<param-name>maxWaitAfterWrite</param-name>
		<param-value>100</param-value>
	</init-param>
    <init-param>
    	<param-name>config</param-name>
    	<param-value>WEB-INF/dwr/dwr.xml</param-value>
    </init-param>
    <init-param>
    	<param-name>initApplicationScopeCreatorsAtStartup</param-name>
    	<param-value>true</param-value>
    </init-param>
    <init-param>
    	<description>对dwr scriptSession 自定义管理</description>
    	<param-name>org.directwebremoting.extend.ScriptSessionManager</param-name>
    	<param-value>com.integral.util.dwr.DwrScriptSessionManagerUtil</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
  	<servlet-name>dwr</servlet-name>
  	<url-pattern>/dwr/*</url-pattern>
  </servlet-mapping>
  <!-- Spring MVC 配置
  <servlet>
  	<servlet-name>springMVC</servlet-name>
  	<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
  	<init-param>
  		<param-name>contextConfigLocation</param-name>
  		<param-value>/WEB-INF/spring-mvc/mvc-servlet.xml</param-value>
  	</init-param>
  	<load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
  	<servlet-name>springMVC</servlet-name>
  	<url-pattern>/spring/*</url-pattern>
  </servlet-mapping>
   -->
   
  <!-- Struts2配置 -->
  <!-- 
  <filter>
  	<filter-name>struts2</filter-name>
  	<filter-class>org.apache.struts2.dispatcher.FilterDispatcher</filter-class>
  </filter>
   -->
   <!-- Struts2配置, 可以使用struts.action.excludePattern配置 -->
  <filter>
	<filter-name>struts2</filter-name>
	<filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</filter-class>
  </filter>
  
  <filter-mapping>
  	<filter-name>struts2</filter-name>
  	<url-pattern>/*</url-pattern>
  </filter-mapping>
  
  <!-- 避免内存泄漏 -->
  <filter>
  	<filter-name>struts-cleanup</filter-name>
  	<filter-class>org.apache.struts2.dispatcher.ActionContextCleanUp</filter-class>
  </filter>
  <filter-mapping>
  	<filter-name>struts-cleanup</filter-name>
  	<url-pattern>/*</url-pattern>
  </filter-mapping>
  <!-- Spring刷新Interceptor防止内存泄漏 -->
  <listener>
  	<listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
  </listener>
  <welcome-file-list>
  	<welcome-file>login.jsp</welcome-file>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>default.htm</welcome-file>
    <welcome-file>default.jsp</welcome-file>
  </welcome-file-list>
  <session-config>
  	<!-- 8小时 -->
  	<session-timeout>480</session-timeout>
  	<!-- 24小时 -->
  	<!-- <session-timeout>1440</session-timeout> -->
  </session-config>
</web-app>